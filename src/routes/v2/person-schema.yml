swagger: '2.0'
info:
  title: Person API
  description: API for person-related operations
  version: '1.0.0'
  license:
    name: 'Open Government Licence v3.0'
    url: 'https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3'
tags:
  - name: 'person'
    description: 'Operations related to person management'
schemes:
  - 'http'
security: [] # mTLS, but swagger 2.0 does not support it directly, should probably upgrade to 3.0+
basePath: /extapi
paths:
  /person/{personId}/summary:
    get:
      tags:
        - 'person'
      summary: 'Find By Person Id.'
      description: 'Request to Gets details for a person with a specified id.'
      operationId: 'getPersonSummaryById'
      produces:
        - 'application/json'
        - 'text/html'
      parameters:
        - name: 'personId'
          in: 'path'
          description: 'personId'
          required: true
          type: 'integer'
          maximum: 99999999999999999999
          x-examples: [11111111, 11112222, 22222222]
      # unsupported params
      # - name: 'callerId'
      #   in: 'header'
      #   required: false
      #   type: 'integer'
      # - name: 'personId'
      #   in: 'header'
      #   required: false
      #   type: 'integer'
      #   pattern: '[0-9]{0,20}'
      # - name: 'userType'
      #   in: 'header'
      #   required: false
      #   type: 'string'
      responses:
        '200':
          description: "returns person details with a specified id. Returns result\
            \ inside a CapdResponse"
          schema:
            type: 'object'
            properties:
              _data:
                $ref: '#/definitions/PersonalDetailsFullWithLockedFlagResponse'
            required:
              - '_data'
        '403':
          description: "Getting an internal user's details is forbidden, or a WAF\
            \ rule has been triggered"
          schema:
            $ref: '#/definitions/WebApplicationException'
          examples:
            application/json:
              message: 'Some error message'
            text/html: |
              <html><body><h1>403 Forbidden</h1>
              Request forbidden by administrative rules.
              </body></html>
        '404':
          description: 'Person not found'
          schema:
            $ref: '#/definitions/WebApplicationException'
  /person/search:
    post:
      tags:
        - 'person'
      summary: 'Search Person.'
      description: "Request to Find a list of CustomerSummaryResponse's based on a\
        \ search parameter."
      operationId: 'searchPerson'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          required: true
          schema:
            $ref: '#/definitions/PartySearchRequest'
      # unsupported params
      # - name: 'callerId'
      #   in: 'header'
      #   required: false
      #   type: 'integer'
      responses:
        '200':
          description: "Successfully returns list of customer summary. Returns result\
            \ inside a CapdPageResponse"
          schema:
            type: 'object'
            properties:
              _data:
                type: 'array'
                items:
                  $ref: '#/definitions/CustomerSummaryResponse'
              _page:
                $ref: '#/definitions/Page'
            required:
              - '_data'
              - '_page'
        '400':
          description: 'breached search string length'
          schema:
            $ref: '#/definitions/WebApplicationException'
        '500':
          description: 'internal server error, or only `searchFieldType` was provided'
          schema:
            $ref: '#/definitions/WebApplicationException'
          examples:
            application/json:
              code: 500
              message: "There was an error processing your request. It has been logged\
                \ (ID 704b9f3b19536a35)."

definitions:
  # request objects
  PartySearchRequest:
    type: 'object'
    properties:
      searchFieldType:
        type: 'string'
        enum:
          - 'CUSTOMER_REFERENCE'
        # unsupported values
        # - 'SBI'
        # - 'BUSINESS_NAME'
        # - 'TRADER_NUMBER'
        # - 'VENDOR_NUMBER'
        # - 'CUSTOMER_NAME'
        # - 'PERSONAL_IDENTIFIER'
        # - 'CUSTOMER_POSTCODE'
        # - 'BUSINESS_POSTCODE'
        example: 'CUSTOMER_REFERENCE'
      primarySearchPhrase:
        type: 'string'
        minLength: 10
        # pattern: '^[0-9]{10,}$' # not just CRN upstream, other searches are also allowed
    x-examples:
      - primarySearchPhrase: 'crn-11111111'
        searchFieldType: 'CUSTOMER_REFERENCE'
      - primarySearchPhrase: 'crn-11111122'
        searchFieldType: 'CUSTOMER_REFERENCE'
      - primarySearchPhrase: 'crn-22222222'
        searchFieldType: 'CUSTOMER_REFERENCE'
    required:
      - 'searchFieldType'
      - 'primarySearchPhrase'
    # unsupported properties
    # offset:
    #   type: 'integer'
    #   format: 'int32'
    # limit:
    #   type: 'integer'
    #   format: 'int32'
    # secondarySearchPhrase:
    #   type: 'string'

  # response objects
  CustomerSummaryResponse:
    type: 'object'
    additionalProperties: false
    properties:
      id:
        type: 'integer'
      fullName:
        type: 'string'
      primaryAddress:
        $ref: '#/definitions/PartyAddressResponse'
      personalIdentifiers:
        type: 'array'
        items:
          type: 'string'
      nationalInsuranceNumber:
        type: ['string', 'null']
      customerReference:
        type: 'string'
      email:
        type: 'string'
      locked:
        type: 'boolean'
      deactivated:
        type: 'boolean'
    required:
      - 'id'
      - 'fullName'
      - 'primaryAddress'
      - 'personalIdentifiers'
      - 'nationalInsuranceNumber'
      - 'customerReference'
      - 'email'
      - 'locked'
      - 'deactivated'
  Page:
    type: 'object'
    properties:
      number:
        type: 'integer'
        format: 'int32'
      size:
        type: 'integer'
        format: 'int32'
      totalPages:
        type: 'integer'
        format: 'int32'
      numberOfElements:
        type: 'integer'
        format: 'int32'
      totalElements:
        type: 'integer'
        format: 'int64'
  PartyAddressResponse:
    type: 'object'
    properties:
      address1:
        type: ['string', 'null']
      address2:
        type: ['string', 'null']
      address3:
        type: ['string', 'null']
      address4:
        type: ['string', 'null']
      address5:
        type: ['string', 'null']
      pafOrganisationName:
        type: ['string', 'null']
      flatName:
        type: ['string', 'null']
      buildingNumberRange:
        type: ['string', 'null']
      buildingName:
        type: ['string', 'null']
      street:
        type: ['string', 'null']
      city:
        type: ['string', 'null']
      county:
        type: ['string', 'null']
      postalCode:
        type: ['string', 'null']
      country:
        type: ['string', 'null']
      uprn:
        type: ['string', 'null']
      dependentLocality:
        type: ['string', 'null']
      doubleDependentLocality:
        type: ['string', 'null']
      addressTypeId:
        type: ['integer', 'null']
  PersonalDetailsFullWithLockedFlagResponse:
    type: 'object'
    additionalProperties: false
    properties:
      title:
        type: ['string', 'null']
      otherTitle:
        type: ['string', 'null']
      firstName:
        type: 'string'
      middleName:
        type: ['string', 'null']
      lastName:
        type: 'string'
      dateOfBirth:
        type: ['integer', 'null']
      landline:
        type: ['string', 'null']
      mobile:
        type: ['string', 'null']
      email:
        type: ['string', 'null']
      doNotContact:
        type: 'boolean'
      emailValidated:
        type: 'boolean'
      address:
        $ref: '#/definitions/PartyAddressResponse'
      locked:
        type: 'boolean'
      id:
        type: 'integer'
      confirmed:
        type: 'boolean'
      customerReferenceNumber:
        type: 'string'
      personalIdentifiers:
        type: 'array'
        items:
          type: 'string'
      deactivated:
        type: 'boolean'
    required:
      - 'title'
      - 'otherTitle'
      - 'firstName'
      - 'middleName'
      - 'lastName'
      - 'dateOfBirth'
      - 'landline'
      - 'mobile'
      - 'email'
      - 'doNotContact'
      - 'emailValidated'
      - 'address'
      - 'locked'
      - 'id'
      - 'confirmed'
      - 'customerReferenceNumber'
      - 'personalIdentifiers'
      - 'deactivated'

  # errors
  DaoException:
    type: 'object'
    properties:
      cause:
        $ref: '#/definitions/Throwable'
      stackTrace:
        type: 'array'
        items:
          $ref: '#/definitions/StackTraceElement'
      message:
        type: 'string'
      suppressed:
        type: 'array'
        items:
          $ref: '#/definitions/Throwable'
      localizedMessage:
        type: 'string'
  Locale:
    type: 'object'
    properties:
      displayName:
        type: 'string'
      script:
        type: 'string'
      country:
        type: 'string'
      variant:
        type: 'string'
      extensionKeys:
        type: 'array'
        uniqueItems: true
        items:
          type: 'string'
  Response:
    type: 'object'
    properties:
      lastModified:
        type: 'string'
        format: 'date-time'
      date:
        type: 'string'
        format: 'date-time'
      length:
        type: 'integer'
        format: 'int32'
      location:
        type: 'string'
        format: 'uri'
      language:
        $ref: '#/definitions/Locale'
      metadata:
        type: 'object'
        additionalProperties:
          type: 'array'
          items:
            type: 'object'
  StackTraceElement:
    type: 'object'
    properties:
      classLoaderName:
        type: 'string'
      moduleName:
        type: 'string'
      moduleVersion:
        type: 'string'
      methodName:
        type: 'string'
      fileName:
        type: 'string'
      lineNumber:
        type: 'integer'
        format: 'int32'
      className:
        type: 'string'
      nativeMethod:
        type: 'boolean'
  Throwable:
    type: 'object'
    properties:
      cause:
        $ref: '#/definitions/Throwable'
      stackTrace:
        type: 'array'
        items:
          $ref: '#/definitions/StackTraceElement'
      message:
        type: 'string'
      suppressed:
        type: 'array'
        items:
          $ref: '#/definitions/Throwable'
      localizedMessage:
        type: 'string'
  WebApplicationException:
    type: 'object'
    properties:
      cause:
        $ref: '#/definitions/Throwable'
      stackTrace:
        type: 'array'
        items:
          $ref: '#/definitions/StackTraceElement'
      response:
        $ref: '#/definitions/Response'
      message:
        type: 'string'
      suppressed:
        type: 'array'
        items:
          $ref: '#/definitions/Throwable'
      localizedMessage:
        type: 'string'
#
# Other endpoints that are currently part of KITS but not this mock
# NOTE: potentially useful as these endpoints may be added in the future
#
# /person/context:
#   get:
#     tags:
#       - 'person'
#     summary: 'Get User Context.'
#     description: "Request to Get User Context - Getting basic person details for\
#       \ the logged in person."
#     operationId: 'getUserContext'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'userType'
#         in: 'header'
#         required: false
#         type: 'string'
#     responses:
#       '200':
#         description: "Successfully returns user context. Returns result inside a\
#           \ CapdResponse"
#         schema:
#           $ref: '#/definitions/UserContextResponse'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/{customerReference}/{obfuscationType}:
#   delete:
#     tags:
#       - 'person'
#     summary: 'Delete Person Details.'
#     description: 'Request to Deletes a person with the specified details.'
#     operationId: 'obfuscatePersonDetails'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'customerReference'
#         in: 'path'
#         description: 'customerReference'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{1,20}'
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{1,20}'
#       - name: 'obfuscationType'
#         in: 'path'
#         description: 'obfuscationType'
#         required: true
#         type: 'string'
#         pattern: '[A-Z]'
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'userType'
#         in: 'header'
#         required: false
#         type: 'string'
#         enum:
#           - 'internal'
#           - 'external'
#           - 'ida_no_match'
#     responses:
#       '200':
#         description: 'Successfully Delete Person Details'
#         schema:
#           type: 'array'
#           items:
#             type: 'string'
#       '404':
#         description: 'Person ID and Customer Reference do not match a customer record'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '403':
#         description: 'Person has active links to a business'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: 'Exception from SitiAgri in pre-deletion phase'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/unconfirm-not-edited:
#   put:
#     tags:
#       - 'person'
#     summary: 'Updates organisations.'
#     description: 'Updates organisations that were confirmed date is lower than date.'
#     operationId: 'updateNotEditedOrganisationEntries_1'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           type: 'integer'
#           format: 'int32'
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#     responses:
#       '200':
#         description: "Organisation model with all data filled in. Returns result\
#           \ inside a CapdResponse"
#         schema:
#           type: 'boolean'
#       '500':
#         description: 'Error updating organisation'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/fullname-email:
#   get:
#     tags:
#       - 'person'
#     summary: 'Find By Person Ids.'
#     description: 'Request to Gets details for a persons with a specified ids.'
#     operationId: 'getPersons'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'id'
#         in: 'query'
#         required: false
#         type: 'array'
#         items:
#           type: 'integer'
#         collectionFormat: 'multi'
#     responses:
#       '200':
#         description: 'returns list of person details inside a CapdResponse'
#         schema:
#           type: 'array'
#           items:
#             $ref: '#/definitions/PersonNameAndEmailResponse'
#       '403':
#         description: "Getting an external or internal fullname and email is forbidden\
#           \ when not requested by notification-service"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '400':
#         description: 'List of person ids (parameter: id) is missing'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/internal:
#   post:
#     tags:
#       - 'person'
#     summary: 'Create Internal Person.'
#     description: 'Request to Create Internal Person.'
#     operationId: 'createInternalPerson'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           $ref: '#/definitions/InternalPersonRequest'
#     responses:
#       '200':
#         description: 'Successfully returns list of customer summary'
#         schema:
#           $ref: '#/definitions/CapdInternalUserCreateResponseImpl'
#       '403':
#         description: 'Request forbidden'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: 'internal server error'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/create:
#   post:
#     tags:
#       - 'person'
#     summary: 'Create Person Details.'
#     description: 'Request to Creates a person with the specified details.'
#     operationId: 'createPersonDetails'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           $ref: '#/definitions/PersonalDetailsRequest'
#       - name: 'userType'
#         in: 'header'
#         required: false
#         type: 'string'
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#     responses:
#       '200':
#         description: "Successfully Person Details created. Returns result inside\
#           \ a CapdResponse"
#         schema:
#           type: 'string'
#       '403':
#         description: 'Action forbidden'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '422':
#         description: 'Invalid person'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}:
#   get:
#     tags:
#       - 'person'
#     summary: 'Find By Person Id.'
#     description: 'Request to Gets details for a person with a specified id.'
#     operationId: 'getByPersonId'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#     responses:
#       '200':
#         description: "returns person details with a specified id. Returns result\
#           \ inside CapdResponse"
#         schema:
#           $ref: '#/definitions/PersonalDetailsFullWithLockedFlagResponse'
#       '403':
#         description: "Getting an internal user's details is forbidden"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#   put:
#     tags:
#       - 'person'
#     summary: 'Update Person Details.'
#     description: 'Request to Updates a person with the specified details.'
#     operationId: 'updatePersonDetails'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           $ref: '#/definitions/PersonalDetailsRequest'
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'userType'
#         in: 'header'
#         required: false
#         type: 'string'
#     responses:
#       '403':
#         description: 'Action forbidden'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '422':
#         description: 'Invalid person'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '404':
#         description: 'Person not found'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '200':
#         description: 'Successfully Update Person Details'
# /person/duplicate/case:
#   post:
#     tags:
#       - 'person'
#     summary: 'check for duplicate person.'
#     description: 'Request to check for duplicate person.'
#     operationId: 'getPersonDuplicate'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           $ref: '#/definitions/DuplicatePersonsCreateCaseRequest'
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#     responses:
#       '200':
#         description: 'Duplicate person found. Returns result inside a CapdResponse'
#         schema:
#           type: 'boolean'
#       '404':
#         description: 'person not found'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/check/duplicates:
#   post:
#     tags:
#       - 'person'
#     summary: 'check Duplicates.'
#     description: 'Request to check Duplicates.'
#     operationId: 'getPersonDuplicate_1'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           $ref: '#/definitions/PersonDuplicateRequest'
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#     responses:
#       '200':
#         description: 'Successfully finds duplicate. Returns result inside a CapdResponse'
#         schema:
#           $ref: '#/definitions/PersonDuplicateResponse'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: 'internal server error'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/email-and-customer-reference:
#   get:
#     tags:
#       - 'person'
#     summary: 'Get email address and customer reference for person.'
#     description: "Request to Get email address and customer reference for person\
#       \ - For a given personId returns their primary email address and customer\
#       \ reference."
#     operationId: 'getEmailAddressAndCustomerReferenceForPersonID'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '200':
#         description: "successfully returns person email and customer reference.\
#           \ Returns result in CapdResponse"
#         schema:
#           $ref: '#/definitions/PersonEmailAndCustomerReferenceResponse'
#       '404':
#         description: 'Person not found'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: 'internal server error'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{email}/validateEmail:
#   get:
#     tags:
#       - 'person'
#     summary: 'Validates emails'
#     description: 'Returns a boolean to indicate if the email is duplicated'
#     operationId: 'isEmailDuplicated'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'email'
#         in: 'path'
#         description: 'email'
#         required: true
#         type: 'string'
#     responses:
#       '200':
#         description: "successfully returns the email and a flag to indicate if it's\
#           \ duplicate. Returns result inside CapdResponse"
#         schema:
#           type: 'object'
#           additionalProperties:
#             type: 'boolean'
#       '500':
#         description: 'Error confirming if email is duplicated'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/validateEmailFlag:
#   get:
#     tags:
#       - 'person'
#     summary: 'Verifies email.'
#     description: 'Request to Verifies if email for given person Id is validated.'
#     operationId: 'isValidated'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '200':
#         description: "Map containing email and 'Validated' flag"
#         schema:
#           type: 'object'
#           additionalProperties:
#             type: 'boolean'
#       '500':
#         description: 'There is more than one person with email'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/check/register:
#   get:
#     tags:
#       - 'person'
#     summary: 'Is Person Fully Registered.'
#     description: "Request to Checks if a person with a specified id has fully registered\
#       \ in the system."
#     operationId: 'isPersonFullyRegistered'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '200':
#         description: 'Person Fully Registered. Returns result inside a CapdResponse'
#         schema:
#           type: 'boolean'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/address/bs7666:
#   get:
#     tags:
#       - 'person'
#     summary: 'Find Primary Party Address in BS7666 format.'
#     description: 'Request to Gets address for a person with a specified id.'
#     operationId: 'findPrimaryPartyAddressInBS7666Format'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '200':
#         description: 'returns person Address. Returns a response inside a CapdResponse'
#         schema:
#           $ref: '#/definitions/PartyAddressResponse'
#       '404':
#         description: 'Party address not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/confirmation:
#   get:
#     tags:
#       - 'person'
#     summary: 'Is Person Confirmed.'
#     description: 'Request to hecks if a person is confirmed.'
#     operationId: 'isPersonConfirmed'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '200':
#         description: 'Check person confirmation. Returns a result inside a CapdResponse'
#         schema:
#           type: 'boolean'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/lock:
#   post:
#     tags:
#       - 'person'
#     summary: 'Lock Customer Account.'
#     description: 'Request to Lock Customer Account using person id.'
#     operationId: 'lockCustomerAccount'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           $ref: '#/definitions/PartyNoteRequest'
#     responses:
#       '400':
#         description: 'Invalid reason and notes'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: 'Person not found'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '200':
#         description: 'Successfully locked person'
# /person/{personId}/unlock:
#   post:
#     tags:
#       - 'person'
#     summary: 'Unlock Customer Account.'
#     description: 'Request to Unlock Customer Account using person id.'
#     operationId: 'unlockCustomerAccount'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           $ref: '#/definitions/PartyNoteRequest'
#     responses:
#       '400':
#         description: 'Invalid reason and notes'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: 'Person not found'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '200':
#         description: 'Successfully unlock person'
# /person/{personId}/deactivate:
#   post:
#     tags:
#       - 'person'
#     summary: 'Deactivate Customer Account.'
#     description: 'Request to Deactivate Customer Account.'
#     operationId: 'deactivateCustomerAccount'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           $ref: '#/definitions/PartyNoteRequest'
#     responses:
#       '400':
#         description: 'Invalid reason and notes'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: 'Person not found'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '200':
#         description: 'Successfully deactivate person'
# /person/{personId}/confirmdetails:
#   put:
#     tags:
#       - 'person'
#     summary: 'Confirm Person Details.'
#     description: 'Confirm details of a person (setConfirmed is set to true.'
#     operationId: 'confirmPersonDetails'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '200':
#         description: 'Successfully Person Details updated'
# /person/internal/email:
#   get:
#     tags:
#       - 'person'
#     summary: 'Get Internal Person Email.'
#     description: 'Request to Get Internal Person Email.'
#     operationId: 'getInternalPersonEmail'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'personId'
#         in: 'query'
#         required: false
#         type: 'integer'
#     responses:
#       '200':
#         description: "Successfully returns Internal Person Email. Returns result\
#           \ inside a CapdResponse"
#         schema:
#           type: 'string'
#       '403':
#         description: 'Request forbidden'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '404':
#         description: 'Person does not have any email assigned'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/updatedob:
#   put:
#     tags:
#       - 'person'
#     summary: 'Update Person Date of Birth.'
#     description: 'Request to Update Person Date of Birth.'
#     operationId: 'updatePersonDob'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - in: 'body'
#         name: 'body'
#         required: false
#         schema:
#           type: 'string'
#           format: 'date-time'
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '200':
#         description: 'Successfully Update Person Date of Birth'
# /person/{personId}/dob:
#   get:
#     tags:
#       - 'person'
#     summary: 'Get persons DOB.'
#     description: 'Request to Get persons DOB based on person ID.'
#     operationId: 'getPersonDob'
#     consumes:
#       - 'application/json'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '200':
#         description: 'Successfully gets persons DOB. Returns result inside a CapdResponse'
#         schema:
#           type: 'string'
#           format: 'date-time'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/registration-codes:
#   post:
#     tags:
#       - 'person'
#     summary: 'Generate a code.'
#     description: "Request to Generate a code in order for the user to create an\
#       \ identity."
#     operationId: 'generateRegistrationCodeForCustomer'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '200':
#         description: 'Successfully Generate a code. Returns result inside CapdResponse'
#         schema:
#           type: 'string'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '403':
#         description: 'Person already matched'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{customerReference}/assisted-assurance-state:
#   get:
#     tags:
#       - 'person'
#     summary: 'Gets the state of the external person.'
#     description: "Request to Gets the state of the external person's registration\
#       \ progress through the assisted assurance mechanism."
#     operationId: 'getAssistedAssuranceState'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'customerReference'
#         in: 'path'
#         description: 'customerReference'
#         required: true
#         type: 'string'
#     responses:
#       '200':
#         description: "Successfully Gets the state of the external person. Result\
#           \ result inside a CapdResponse"
#         schema:
#           type: 'string'
#           enum:
#             - 'NoProgress'
#             - 'RegistrationCodeCreated'
#             - 'UserCreated'
#       '500':
#         description: 'internal server error'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{customerReference}/identity:
#   delete:
#     tags:
#       - 'person'
#     summary: 'Deletes an identity.'
#     description: 'Request to Deletes an person identity.'
#     operationId: 'deleteIdentity'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'callerId'
#         in: 'header'
#         required: false
#         type: 'integer'
#       - name: 'customerReference'
#         in: 'path'
#         description: 'customerReference'
#         required: true
#         type: 'string'
#     responses:
#       '500':
#         description: 'internal server error'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '200':
#         description: 'Successfully Gets the state of the external person'
# /person/{personId}/fullname:
#   get:
#     tags:
#       - 'person'
#     summary: 'Get external Person full name.'
#     description: "Request to Get a persons full name based on personId. For internal\
#       \ users returns 403 forbidden."
#     operationId: 'getPersonFullName'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#     responses:
#       '200':
#         description: "successfully returns person full name. Returns result inside\
#           \ a CapdResponse"
#         schema:
#           type: 'string'
#       '403':
#         description: 'Internal Persons name requested'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '404':
#         description: 'Person not present'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{email}/id:
#   get:
#     tags:
#       - 'person'
#     summary: 'Get person id from email.'
#     description: 'Request to Get person id from email.'
#     operationId: 'getPersonIdByEmail'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'email'
#         in: 'path'
#         description: 'email'
#         required: true
#         type: 'string'
#     responses:
#       '200':
#         description: 'successfully returns person id. Returns result inside CapdResponse'
#         schema:
#           type: 'integer'
#       '404':
#         description: 'Person not found'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: 'There is more than one person with email'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{personId}/{email}/confirm:
#   get:
#     tags:
#       - 'person'
#     summary: 'Verifies email.'
#     description: "Request to Verifies if the email can be used and marked as validated\
#       \ by the user and it's not validated on another customers account."
#     operationId: 'confirmEmail'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'personId'
#         in: 'path'
#         description: 'personId'
#         required: true
#         type: 'integer'
#         pattern: '[0-9]{0,20}'
#       - name: 'email'
#         in: 'path'
#         description: 'email'
#         required: true
#         type: 'string'
#     responses:
#       '200':
#         description: "PartyDigitalContact model with all data filled in. Returns\
#           \ result inside a CapdResponse"
#         schema:
#           $ref: '#/definitions/PartyDigitalContact'
#       '404':
#         description: 'Person does not have any email assigned'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile"
#         schema:
#           $ref: '#/definitions/WebApplicationException'
# /person/{crn}/find:
#   get:
#     tags:
#       - 'person'
#     summary: 'Change the B2c password.'
#     description: 'Request to Change the B2c password.'
#     operationId: 'findPersonDetails'
#     produces:
#       - 'application/json'
#     parameters:
#       - name: 'crn'
#         in: 'path'
#         description: 'crn'
#         required: true
#         type: 'string'
#     responses:
#       '200':
#         description: 'successful operation'
#         schema:
#           $ref: '#/definitions/CapdResponsePersonDetailsResponse'
#       '401':
#         description: 'CRN and email data mismatch.'
#         schema:
#           $ref: '#/definitions/WebApplicationException'
#       '500':
#         description: "Dao exception encountered when retrieving complete person\
#           \ profile."
#         schema:
#           $ref: '#/definitions/DaoException'
