describe('Basic queries for faked routes', () => {
  let mockServer
  const PROCESS_ENV = process.env

  beforeAll(async () => {
    process.env = { ...PROCESS_ENV }
    process.env.PORT = '3097' // Set to obscure port to avoid conflicts
    const { startServer } = await import('../../src/server.js')
    mockServer = await startServer()
  })
  afterAll(() => {
    process.env = PROCESS_ENV
    mockServer.stop({ timeout: 0 })
  })
  describe('Land routes', () => {
    test('Should return data for /lms/organisation/{organisationId}/parcels/historic/{historicDate}', async () => {
      const response = await mockServer.inject({
        method: 'GET',
        url: '/extapi/lms/organisation/1111111111/parcels/historic/01-Jan-25'
      })
      expect(response.statusCode).toBe(200)
      const json = JSON.parse(response.payload)
      expect(json).toEqual(
        expect.arrayContaining([
          {
            id: 7514996,
            sheetId: 'SS6828',
            parcelId: '3818',
            area: 8057.99,
            pendingDigitisation: false
          },
          {
            id: 5930807,
            sheetId: 'SS6827',
            parcelId: '7399',
            area: 19644.16,
            pendingDigitisation: false
          }
        ])
      )
    })

    test('Should return data for /lms/organisation/{organisationId}/parcel-details/historic/{historicDate}', async () => {
      const response = await mockServer.inject({
        method: 'GET',
        url: '/extapi/lms/organisation/1111111111/parcel-details/historic/01-Jan-25'
      })
      expect(response.statusCode).toBe(200)
      const json = JSON.parse(response.payload)
      expect(json).toEqual(
        expect.arrayContaining([
          {
            sheetId: 'SS6828',
            parcelId: '3818',
            validFrom: expect.any(Number),
            validTo: expect.any(Number)
          },
          {
            sheetId: 'SS6827',
            parcelId: '7399',
            validFrom: expect.any(Number),
            validTo: expect.any(Number)
          }
        ])
      )
    })

    test('Should return data for /lms/organisation/{organisationId}/parcel/sheet-id/{sheetId}/parcel-id/{parcelId}/historic/{historicDate}/land-covers', async () => {
      const response = await mockServer.inject({
        method: 'GET',
        url: '/extapi/lms/organisation/1111111111/parcel/sheet-id/SS6828/parcel-id/3818/historic/01-Jan-25/land-covers'
      })
      expect(response.statusCode).toBe(200)
      const json = JSON.parse(response.payload)
      expect(json).toEqual({
        type: 'FeatureCollection',
        features: [
          {
            id: 12151270,
            geometry: {
              type: 'Polygon',
              coordinates: [
                [
                  [268406.569, 128157.38],
                  [268406.839, 128167.793],
                  [268397.38, 128169.16],
                  [268399.56, 128177.94],
                  [268397.09, 128178.2],
                  [268392.93, 128178.81],
                  [268361.27, 128183.45],
                  [268358.21, 128183.75],
                  [268348.71, 128184.368],
                  [268347.826, 128176.821],
                  [268346.604, 128167.295],
                  [268367.207, 128163.48],
                  [268366.857, 128162.503],
                  [268366.075, 128160.3211],
                  [268364.336, 128155.469],
                  [268363.701, 128152.373],
                  [268364.415, 128149.119],
                  [268367.511, 128145.785],
                  [268371.479, 128143.086],
                  [268377.591, 128139.832],
                  [268382.671, 128138.482],
                  [268386.561, 128138.006],
                  [268390.212, 128137.689],
                  [268394.175, 128138.338],
                  [268395.054, 128138.482],
                  [268397.118, 128139.514],
                  [268399.102, 128141.34],
                  [268400.927, 128143.534],
                  [268401.96, 128149.357],
                  [268403.785, 128153.96],
                  [268404.896, 128155.707],
                  [268406.569, 128157.38]
                ]
              ]
            },
            properties: {
              area: '1810.9',
              code: '525',
              name: 'Structure',
              isBpsEligible: 'false'
            },
            type: 'Feature'
          },
          {
            id: 12151271,
            geometry: {
              type: 'Polygon',
              coordinates: [
                [
                  [268346.604, 128167.295],
                  [268347.826, 128176.821],
                  [268348.71, 128184.368],
                  [268358.21, 128183.75],
                  [268361.27, 128183.45],
                  [268392.93, 128178.81],
                  [268397.09, 128178.2],
                  [268399.56, 128177.94],
                  [268397.38, 128169.16],
                  [268406.839, 128167.793],
                  [268406.569, 128157.38],
                  [268409.925, 128158.5714],
                  [268413.707, 128159.914],
                  [268418.036, 128161.89],
                  [268419.74, 128162.692],
                  [268423.631, 128163.831],
                  [268426.862, 128163.462],
                  [268431.545, 128161.953],
                  [268445.8846, 128156.7331],
                  [268449.643, 128155.365],
                  [268451.31, 128155.365],
                  [268452.659, 128156],
                  [268453.063, 128157.853],
                  [268459.569, 128169.672],
                  [268461.914, 128173.408],
                  [268465.172, 128173.088],
                  [268465.658, 128175.339],
                  [268471.961, 128174.407],
                  [268472.58, 128176.28],
                  [268473.92, 128177.37],
                  [268475.55, 128177.66],
                  [268488.7273, 128175.6139],
                  [268491.9019, 128175.121],
                  [268494.5586, 128174.7085],
                  [268494.9614, 128187.245],
                  [268481.635, 128191.379],
                  [268474.286, 128193.659],
                  [268469.103, 128194.145],
                  [268468.0819, 128183.4516],
                  [268463.051, 128183.738],
                  [268460.74, 128183.87],
                  [268442.67, 128185.31],
                  [268442.05, 128177.81],
                  [268417.91, 128179.83],
                  [268418.444, 128186.167],
                  [268394.268, 128188.203],
                  [268394.36, 128189.39],
                  [268379.848, 128190.525],
                  [268365.98, 128191.61],
                  [268357.18, 128192.3],
                  [268335, 128194.03],
                  [268321.23, 128195.19],
                  [268314.49, 128195.83],
                  [268294.49, 128198.43],
                  [268293.259, 128198.459],
                  [268288.211, 128202.778],
                  [268284.199, 128206.635],
                  [268280.6658, 128209.4104],
                  [268279.94, 128204.58],
                  [268282.45, 128202.41],
                  [268285.29, 128199.92],
                  [268289.4, 128196.55],
                  [268293.05, 128194.26],
                  [268296.83, 128192.62],
                  [268313.47, 128189.37],
                  [268314.114, 128189.243],
                  [268316.8036, 128188.4213],
                  [268319.79, 128187.42],
                  [268324.05, 128185.7],
                  [268331.6, 128180.42],
                  [268334.19, 128177.63],
                  [268336.69, 128178.85],
                  [268338.77, 128179.88],
                  [268342.51, 128177.8804],
                  [268343.7131, 128170.4429],
                  [268346.604, 128167.295]
                ]
              ]
            },
            properties: {
              area: '2926.54',
              code: '379',
              name: 'Farmyards',
              isBpsEligible: 'false'
            },
            type: 'Feature'
          },
          {
            id: 12151272,
            geometry: {
              type: 'Polygon',
              coordinates: [
                [
                  [268464.9997, 128172.2892],
                  [268465.1721, 128173.088],
                  [268461.914, 128173.408],
                  [268459.569, 128169.672],
                  [268453.063, 128157.853],
                  [268452.659, 128156],
                  [268451.31, 128155.365],
                  [268449.643, 128155.365],
                  [268445.8846, 128156.7331],
                  [268431.545, 128161.953],
                  [268426.862, 128163.462],
                  [268423.631, 128163.831],
                  [268419.74, 128162.692],
                  [268418.036, 128161.89],
                  [268413.707, 128159.914],
                  [268409.925, 128158.5714],
                  [268406.569, 128157.38],
                  [268404.896, 128155.707],
                  [268403.785, 128153.96],
                  [268401.96, 128149.357],
                  [268400.927, 128143.534],
                  [268399.102, 128133.244],
                  [268400.202, 128127.855],
                  [268392.45, 128117.65],
                  [268378.9201, 128107.0599],
                  [268379.6895, 128105.2097],
                  [268379.69, 128105.21],
                  [268407.089, 128114.3698],
                  [268417.2, 128117.75],
                  [268439.11, 128125.52],
                  [268442.46, 128127.33],
                  [268447.98, 128131.09],
                  [268453.13, 128135.43],
                  [268456.64, 128140.08],
                  [268458.53, 128144.34],
                  [268460.05, 128150.98],
                  [268462.14, 128159.04],
                  [268464.9997, 128172.2892]
                ]
              ]
            },
            properties: {
              area: '2354.46',
              code: '332',
              name: 'Woodland',
              isBpsEligible: 'false'
            },
            type: 'Feature'
          },
          {
            id: 12151268,
            geometry: {
              type: 'Polygon',
              coordinates: [
                [
                  [268471.1929, 128172.1481],
                  [268471.961, 128174.407],
                  [268465.658, 128175.339],
                  [268465.1721, 128173.088],
                  [268464.9997, 128172.2892],
                  [268462.14, 128159.04],
                  [268460.05, 128150.98],
                  [268458.53, 128144.34],
                  [268456.64, 128140.08],
                  [268453.13, 128135.43],
                  [268447.98, 128131.09],
                  [268442.46, 128127.33],
                  [268439.11, 128125.52],
                  [268417.2, 128117.75],
                  [268407.089, 128114.3698],
                  [268379.69, 128105.21],
                  [268379.6895, 128105.2097],
                  [268380.5901, 128103.0442],
                  [268381.6143, 128100.5814],
                  [268381.6337, 128100.5347],
                  [268384.1989, 128101.4453],
                  [268418.83, 128113.02],
                  [268441.15, 128120.94],
                  [268445.06, 128123.05],
                  [268451.01, 128127.1],
                  [268456.78, 128131.97],
                  [268460.98, 128137.53],
                  [268463.3, 128142.75],
                  [268464.91, 128149.79],
                  [268466.97, 128157.75],
                  [268469.83, 128168.14],
                  [268471.1929, 128172.1481]
                ]
              ]
            },
            properties: {
              area: '634.25',
              code: '631',
              name: 'Metalled track',
              isBpsEligible: 'false'
            },
            type: 'Feature'
          },
          {
            id: 12151269,
            geometry: {
              type: 'Polygon',
              coordinates: [
                [
                  [268400.927, 128143.534],
                  [268399.102, 128141.34],
                  [268397.118, 128139.514],
                  [268395.054, 128138.482],
                  [268394.175, 128138.338],
                  [268390.212, 128137.689],
                  [268386.561, 128138.006],
                  [268382.671, 128138.482],
                  [268377.591, 128139.832],
                  [268371.479, 128143.086],
                  [268367.511, 128145.785],
                  [268364.415, 128149.119],
                  [268363.701, 128152.373],
                  [268364.336, 128155.469],
                  [268366.075, 128160.3211],
                  [268366.857, 128162.503],
                  [268367.207, 128163.48],
                  [268346.604, 128167.295],
                  [268346.6457, 128167.273],
                  [268349.104, 128165.975],
                  [268355.922, 128162.374],
                  [268356.708, 128155.519],
                  [268376.639, 128132.291],
                  [268393.731, 128133.016],
                  [268397.3106, 128133.168],
                  [268399.102, 128133.244],
                  [268400.927, 128143.534]
                ]
              ]
            },
            properties: {
              area: '331.83',
              code: '379',
              name: 'Farmyards',
              isBpsEligible: 'false'
            },
            type: 'Feature'
          }
        ]
      })
    })

    test('Should return data for /lms/organisation/{organisationId}/covers-summary/historic/{historicDate}', async () => {
      const response = await mockServer.inject({
        method: 'GET',
        url: '/extapi/lms/organisation/1111111111/covers-summary/historic/01-Jan-25'
      })
      expect(response.statusCode).toBe(200)
      const json = JSON.parse(response.payload)
      expect(json).toEqual([
        {
          code: '110',
          name: 'Arable Land',
          area: 228294
        },
        {
          code: '130',
          name: 'Permanent Grassland',
          area: 511507.74
        },
        {
          code: '140',
          name: 'Permanent Crops',
          area: 0
        }
      ])
    })

    test('Should throw error for /lms/organisation/{organisationId}/covers-summary/historic/{historicDate} if org does not exist', async () => {
      const response = await mockServer.inject({
        method: 'GET',
        url: '/extapi/lms/organisation/doesntexist/covers-summary/historic/01-Jan-25'
      })
      expect(response.statusCode).toBe(500)
    })
  })
})
